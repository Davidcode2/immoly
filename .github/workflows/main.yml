name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.filter.outputs.src }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for relevant changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - 'src/**'

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-for-changes
    if: needs.changes.outputs.src == 'true' || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials Action for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-region: eu-central-1
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/ci-role 

      - name: Get IP address from SSM
        id: get-server-ip
        run: |
          ip=$(aws ssm get-parameter \
            --name "/compute/hetzner-cloud-server-1/host" \
            --query 'Parameter.Value' \
            --output text)
          echo "host_ip=$ip" >> "$GITHUB_OUTPUT"

      - name: Retrieve SSH private key from SSM
        run: |
          key=$(aws ssm get-parameter \
            --name "/ssh/hetzner-cloud-server-1/openssl_deployment_private_ssh_key" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)

          echo "PRIVATE_SSH_KEY<<EOF" >> $GITHUB_ENV
          echo "$key" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Retrieve Database Secrets from SSM
        id: get-db-secrets
        run: |
          DB_USER=$(aws ssm get-parameter --name "/${{ env.IMAGE_NAME }}/db/user" --with-decryption --query 'Parameter.Value' --output text)
          DB_PASSWORD=$(aws ssm get-parameter --name "/{{ env.IMAGE_NAME }}/db/password" --with-decryption --query 'Parameter.Value' --output text)
          DB_NAME=$(aws ssm get-parameter --name "/{{ env.IMAGE_NAME }}/db/name" --with-decryption --query 'Parameter.Value' --output text)
          DB_HOST=immoly-postgres
          DB_PORT=5432

          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.PRIVATE_SSH_KEY }}

      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ steps.get-server-ip.outputs.host_ip }} << 'EOF'
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

            cd ${{ directory }}
            docker compose stop || true

            DB_USER="${{ env.DB_USER }}" \
            DB_PASSWORD="${{ env.DB_PASSWORD }}" \
            DB_NAME="${{ env.DB_NAME }}" \
            DB_HOST="${{ env.DB_HOST }}" \
            DB_PORT="${{ env.DB_PORT }}" \
            docker compose up -d || true

            docker image prune -f
          EOF
